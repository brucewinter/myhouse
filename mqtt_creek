#!/usr/bin/env python

# Monitors water flow and pressure.  Controls relays that open/close water ball valves.
# More info here:
#   https://www.youtube.com/watch?v=GmIrJjWhRco
#   https://www.youtube.com/watch?v=zlZQ0ffnitM
#   https://www.youtube.com/watch?v=-O_5U8M04PY

# Run on startup with: 
#   /etc/init.d/creek.sh
#   sudo service creek.sh restart


import time, sys
import paho.mqtt.client as mqtt
import RPi.GPIO as GPIO
import Adafruit_ADS1x15

FLOW_SENSOR = 23

GPIO.setmode(GPIO.BCM)
GPIO.setup(FLOW_SENSOR, GPIO.IN, pull_up_down = GPIO.PUD_UP)

# Relay a=1, b=2, c=3, d=4/unused
RELAYS = [[06, 13], [19, 26], [12, 16], [20, 21]]

# Create an ADS1115 ADC (16-bit) instance.
adc = Adafruit_ADS1x15.ADS1115()

# Choose a gain of 1 for reading voltages from 0 to 4.09V.
# Or pick a different gain to change the range of voltages that are read:
#  - 2/3 = +/-6.144V
#  -   1 = +/-4.096V
#  -   2 = +/-2.048V
#  -   4 = +/-1.024V
#  -   8 = +/-0.512V
#  -  16 = +/-0.256V
# See table 3 in the ADS1015/ADS1115 datasheet for more info on gain.
GAIN = 1

for i in [0,1,2,3]:
    for j in [0,1]:
        r = RELAYS[i][j]
    	print 'creek setup relay on IO ' + str(i) + str(j) + str(r)
        GPIO.setup (r, GPIO.OUT)
        GPIO.output(r, GPIO.HIGH)

global flow_count
flow_count = 0

def on_connect(mqttc, obj, flags, rc):
    print("creek connect rc: "+str(rc))
    mqttc.subscribe("+/+/+")

def on_message(mqttc, obj, msg):
    print "creek message: " + msg.topic + " = " + msg.payload
#   print("creek message qos=",msg.qos)
#   print("creek message retain flag=",msg.retain)
    if msg.topic == "creek/valve/3":
        valve_control(1, msg.payload)
    if msg.topic == "creek/valve/2":
        valve_control(2, msg.payload)
    if msg.topic == "creek/valve/1":
        valve_control(3, msg.payload)
    if msg.topic == "creek/valve/4":
        valve_control(4, msg.payload)
    

def on_publish(mqttc, obj, mid):
    print("creek Publish mid: "+str(mid))

def on_subscribe(mqttc, obj, mid, granted_qos):
    print("creek Subscribed: "+str(mid)+" "+str(granted_qos))

def on_log(mqttc, obj, level, string):
    print(string)

def countPulse(channel):
   global flow_count
   flow_count = flow_count + 1
#  print flow_count


def valve_control(valve, state):
    ro = RELAYS[valve-1][0]
    rc = RELAYS[valve-1][1]
    t  = 10
    print "creek Changing valve:" + str(valve) + state + str(ro) + str(rc)
	
    if state == "open" or state == 'on':
        r = ro
    elif state == "close" or state == 'off':
        r = rc
    else:
#       t = float(state) / 10
        t = float(state)
        r = ro
        if t < 0:
            r = rc
            t = -t

    print " relay: " + str(r) + " time: " + str(t)
    GPIO.output(r, GPIO.LOW)
    time.sleep(t);
    GPIO.output(r, GPIO.HIGH)

GPIO.add_event_detect(FLOW_SENSOR, GPIO.FALLING, callback=countPulse)


print 'creek mqtt setup'
mqttc = mqtt.Client()
mqttc.on_message   = on_message
mqttc.on_connect   = on_connect
mqttc.on_publish   = on_publish
mqttc.on_subscribe = on_subscribe


print 'creek mqtt connect'
mqttc.connect("192.168.86.150")


print 'creek loop forever'
#mqttc.loop_forever()
mqttc.loop_start()

seconds = 0
press1  = 0
flow_count_prev = 0

while(1):
    time.sleep(1)
    press2 = adc.read_adc(1, gain=GAIN)
    pressd = press2 - press1
#   print "Pressure=" + str(press2) + " diff=" + str(pressd) + " + s=" + str(seconds)
    if (abs(pressd) > 100):
        print "Pressure change.  Pressure=" + str(press2) + " diff=" + str(pressd)
        press1 = press2
        mqttc.publish("creek/pressure", press2)
    seconds += 1
    if (seconds == 5):
        flowd = flow_count - flow_count_prev
#       print "Flow= " + str(flow_count)
        if (abs(flowd) > 5):
            print "Flow change.  Flow= " + str(flow_count) + " diff=" + str(flowd)
            mqttc.publish("creek/flow", flow_count)
            flow_count_prev = flow_count
        seconds    = 0
        flow_count = 0

    
print '\ncreek caught keyboard interrupt!, bye'
GPIO.cleanup()
sys.exit()
